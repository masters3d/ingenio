## Engines and Motors

According to [wikipedia](https://en.wikipedia.org/wiki/Engine#Terminology), the word engine
comes from the Latin  _ingenium_ which is the root word for ingenious.

In spanish, there is not direct translation for the word engine. The closest translation
is _motor_ which is the same word used in english to also mean engine.  Motor comes from
the latin verb _movere_ which is the root of the word motion. An Engine or Motor's final
goal is to move matter. The industrial revolution came due to the inventions of
Engines/Motors that allowed humans to transform raw materials to mechanical movement
which replaced human manual labor.

It is not a coincidence that engine and engineer only differ by the letters er at the end. The word engineer shares the same latin root of _ingenium_ with engine. According to [wikipedia](https://en.wikipedia.org/wiki/History_of_engineering) an _engineâ€™er_ literally meant someone one who operates an engine. The word engineer has evolved from somebody who operated machines of war, steam engines operators, to its current meaning of somebody who uses applied sciences to create and operate machines.  Humanity took the engineering title forward into the third industrial revolution (The digital revolution) to depict folks who create and manager digital engines that are no longer tied to hard physical objects. 

With this little history of the origins of the words, we could consider engineers as folks who are incharge of setting and keeping things in motion. In an alternatives universe we might have used the term motorer to refer to engineer.

## Software Engineering

Engineering is a well established profession with many different branches. Usually these are tided to real word tangible things like bridges or rockets. As of 2020s, software is embedded in most human related technology from coffee makers to space exploration robots. The idea of software engineering as a profession is difficult to explain to more established engineering regulatory bodies. In the USA most software engineers are not professional  engineers like on other locales where the title is reserved for licensed engineers. 

The digital revolution starts around the time of the transistor become available in the 1950 but it only starts to take off around 1970 when micro transistor become widely available.  It is around this [time](https://en.wikipedia.org/wiki/Unix_time) that software engineering as a profession is born. 

The field of software engineering is only 50 years young (as of 2020's). Most software engineers have computer science (CS) degrees just like CS folks in the past had to get physics and math degrees because there was no computer science departments.  In the future as Software Engineering (SE) matures, I forsee software engineering departments being created in universities that will tackle the needs of the future. 

SE is so diverse that it is hard predict on what level of the stack an engineer is going to working on when hired. For the vast majority of cases software engineering is more about systems engineering than it is about computer science. Distributed Software Engineering Systems can be complex and require the same level of thinking as any other system. 

## Locally is contextual

My daughter says that one of my favorites phrases is "it depends"; Inner vs Outer is completely contextual. It depends on the perspective of the individual speaking for us to say if something is Inner or Outer. The same applies to the idea of explicit and implicit. What is explicit for a team, can be implicit for another. What is implicit for a software component for be explicit for another. What is local for my software component may be global so your software component.  This contextual nature will become more important when we tak into account account interacting with other teams or software components. Another way to say this is that everything is relative. What is big for a team can be small for another. What is fast for component can be slow for another component.

## People Systems
I think it is helpful to define some terminology so we can agree on the terminology going forward. It is not possible to add every companies scenario to this. The end goal is to get a general idea of how people organizational structure in a company. I am only thinking about engineering structure here.

TODO: Insert quote about how engineering is about people.

### Team of people
Software Engineering is a team sport. Individual folks are part of one team who usually report to the same person or have the same lead. Even this part of not completely standard but in most Agile aware organization, people are organized in teams. 

### Group of teams
Most teams have sister teams which I am going to call, groups. Groups will have different names different companies. Imagine that your team works on storage features for an specific product. You sister also work on storage features for a different product. You are part of the storage group. It is possible to a group to only have one team depending on the team. What is private to my type can be [fileprivate](https://github.com/apple/swift-evolution/blob/main/proposals/0025-scoped-access-level.md). 

### Organization of groups
An organization is composed of groups of teams. For the most part organization are going to be business driven. Big companies have these organization to make it easier to compartmentalize the different efforts for a company. In many ways an organization functions like a small/medium sized company. Some companies only have one organization. 

## Software Systems
Lets take some words to describe a generalize architecture. The word `project` is ambiguous in this context.

- Software component
- Cluster of components
- Systems of clusters


## Software Component

## Cluster of components

## Systems of clusters





## Reference

[Three Industrial Revolutions]: https://trailhead.salesforce.com/en/content/learn/modules/learn-about-the-fourth-industrial-revolution/meet-the-three-industrial-revolutions

[micro transistor]: https://en.wikipedia.org/wiki/Microprocessor

[SOFTWARE ENGINEERING TECHNIQUES NATO SCIENCE COMMITTEE 1969]: http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1969.PDF


[Virtual Team or V-teams Microsoft speak]: https://devblogs.microsoft.com/oldnewthing/20121211-00/?p=5863

